@page "/dashboard/{userName}"
@using passfrontend.Models
@using passfrontend.Services
@using Blazored.LocalStorage
@inject UsersApiServices UsersApiService
@inject UserStateService UserState
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigate

<PageTitle>Dashboard</PageTitle>

<h3>User Details</h3>
<div class="row">
    @if (UserState.CurrentUser == null)
    {
        <div class="col-md-12">
            <p>User not found.</p>
            <a href="/createlogin">Create login</a>
            <p>@message</p>
        </div>
    }
    else
    {
        <div class="col-md-12">
            <p><strong>Username:</strong> @UserState.CurrentUser.UserName</p>
            @foreach(var app in Allapplications){
                @if(app.Id != appToEdit){
                    <div class="card p-3 mb-3 mx-auto" style="max-width: 400px;">
                        <div class="card-body">
                            <h5 class="card-title">@app.ApplicationName</h5>
                            <p class="card-text">
                                <strong>Username:</strong> @app.ApplicationUsername <br />
                                <strong>Password:</strong> @app.ApplicationPassword <!-- Hide actual password for security -->
                            </p>
                            @* https://www.telerik.com/blogs/how-to-pass-arguments-to-your-onclick-functions-blazor *@
                            <button class="btn btn-danger ms-2" @onclick="() => DeleteApp(app.Id)">Delete</button>
                            <button class="btn btn-dark btn-outline-light align-content-md-end" @onclick="() => EditApp(app.Id)">Edit</button>
                        </div>
                    </div>
                }
                else{
                    <div class="card p-4 mx-auto" style="max-width: 400px;">
                        <h3>Add Application</h3>
                        <div class="form-group">
                            <label>Name</label>
                            <input class="form-control" @bind=applicationName>
                        </div>
                        <div class="form-group mt-2">
                            <label>User Name</label>
                            <input class="form-control"  @bind=applicationUserName>
                        </div>
                            <div class="form-group mt-2">
                            <label class="mb-2">Password</label> 
                            <br>
                            <input class="form-control" type="text" @bind=applicationPassword>
                        </div>
                        <p>@message</p>
                        <button class="btn btn-primary mt-3 w-100" @onclick="()=>ConfirmEdit(app.Id)">Save Changes</button>
                    </div>
                }
            }
            <button class="btn btn-dark btn-lg btn-outline-light" @onclick=LogOut>Log out</button>
        </div>
    }
</div>

@code {
    [Parameter]
    public string userName {get; set;}
    public List<Application> Allapplications = new();
    public string applicationName {get; set;}
    public string applicationUserName {get; set;}
    public string applicationPassword {get; set;}
    public string message {get; set;}
    long appToEdit {get; set;} = -1;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            var userName = await LocalStorage.GetItemAsync<string>("user");
            if(!string.IsNullOrEmpty(userName)){
                try{
                    var response = await UsersApiService.GetUserByUserName(userName);
                    if(response != null){
                        UserState.CurrentUser = response;
                    }
                }
                catch(Exception ex){
                    message = $"session has expired error: {ex}";
                }
            }
            Allapplications = (await UsersApiService.GetApplicationsAsync(UserState.CurrentUser.Id)).ToList();
            StateHasChanged();
        }
    }
    
    public async Task LogOut(){
        UserState.LogOut();
        await LocalStorage.RemoveItemAsync("user");
        Navigate.NavigateTo("/");
    }

    public async Task DeleteApp(long appId){
        try{
            var response = await UsersApiService.DeleteApp(appId);
            if(response){
                Application appToRemove = Allapplications.FirstOrDefault(app => app.Id == appId);
                if(appToRemove != null){
                    Allapplications.Remove(appToRemove);
                    StateHasChanged();
                }
            }
            else{
                message = "failed to delete the application";
            }
        }
        catch(Exception ex){
            message = $"Error: {ex}";
        }
    }
    public void EditApp(long appId){
        appToEdit = appId;
        Application app = Allapplications.FirstOrDefault(app => app.Id == appId);
        applicationName = app.ApplicationName;
        applicationUserName = app.ApplicationUsername;
        applicationPassword = app.ApplicationPassword;
        StateHasChanged();
    }
    public async Task ConfirmEdit(long appId){
        if(string.IsNullOrEmpty(applicationName) || string.IsNullOrEmpty(applicationUserName) || string.IsNullOrEmpty(applicationPassword)){
            message = "one or more fields are empty";
            return;
        }
        Application editedApp = new(){
            Id = appId,
            ApplicationName = applicationName,
            ApplicationPassword = applicationPassword,
            ApplicationUsername = applicationUserName,
            UserId = UserState.CurrentUser.Id
        };
        try{
            var response = await UsersApiService.ChangeApp(appId, editedApp);
            Application appToUpdate = Allapplications.FirstOrDefault(app => app.Id == appId);
            if(response != null){
                appToUpdate.ApplicationName = response.ApplicationName;
                appToUpdate.ApplicationUsername = response.ApplicationUsername;
                appToUpdate.ApplicationPassword = response.ApplicationPassword;
            }
            appToEdit = -1;
        }
        catch(Exception ex){
            Console.WriteLine(ex);
        }
        StateHasChanged();
    }
}
