@using passfrontend.Models
@using passfrontend.Services
@using Blazored.LocalStorage
@page "/applications"
@inject UsersApiServices UsersApiService
@inject UserStateService UserState
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigate
@inject GetWords AllWords
<PageTitle>Create Applications</PageTitle>

<div class="card p-4 mx-auto" style="max-width: 400px;">
    <h3>Add Application</h3>
    <div class="form-group">
        <label>Name</label>
        <input class="form-control" @bind=ApplicationName placeholder="Enter Application Name">
    </div>
    <div class="form-group mt-2">
        <label>User Name</label>
        <input class="form-control"  @bind=ApplicationUserName placeholder="Enter User Name">
    </div>
        <div class="form-group mt-2">
        <label class="mb-2">Password</label> 
        <br>
        <button class="mb-3 btn btn-dark btn-outline-light" @onclick=GeneratePassPhrase>Generate random passphrase</button>
        <input class="form-control" type="password" @bind=ApplicationPassword placeholder="Enter Password">
    </div>
    <button class="btn btn-primary mt-3 w-100" @onclick="CreateApplication">Create app</button>
    @if(!string.IsNullOrEmpty(message)){
        <div class="text-success mt-3">@message</div>
    }
    else{
        <div class="text-danger mt-3">@error</div>
    }
</div>

@code{
    /// <summary>
    /// new application to store the application the user creates
    /// </summary>
    public  Application application = new();
    /// <summary>
    /// Name of the application the user wants to create
    /// </summary>
    public required string ApplicationName {get; set;}
    /// <summary>
    /// Username for the application the user wants to create
    /// </summary>
    public required string ApplicationUserName {get; set;}
    /// <summary>
    /// Password for the application the user wants to create
    /// </summary>
    public required string ApplicationPassword {get; set;}
    /// <summary>
    /// display message for creation of the app
    /// </summary>
    public string? message {get; set;}
    /// <summary>
    /// display message if there is an error
    /// </summary>
    public string? error {get; set;}
    /// <summary>
    /// The phass phrase that is randomly generated
    /// </summary>
    public string? PassPhrase {get; set;}
    /// <summary>
    /// After the first render generates a list of all words from the words.txt file
    /// also checks local storage to see if the user is already logged in
    /// </summary>
    /// <param name="firstRender">if the first render of the page is done it is true false otherwise</param>
    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            AllWords.FillAllWords();
            var userName = await LocalStorage.GetItemAsync<string>("user");
            if(!string.IsNullOrEmpty(userName)){
                try{
                    var response = await UsersApiService.GetUserByUserName(userName);
                    if(response != null){
                        UserState.CurrentUser = response;
                    }
                    else{
                        Navigate.NavigateTo("/");
                    }
                }
                catch{
                    Navigate.NavigateTo("/");
                }
            }
            else{
                Navigate.NavigateTo("/");
            }
            StateHasChanged();
        }
    }
    /// <summary>
    /// Creates the application with the entered values unless they are null or empty
    /// </summary>
    public async Task CreateApplication(){
        if (string.IsNullOrEmpty(ApplicationName) || string.IsNullOrEmpty(ApplicationUserName) || string.IsNullOrEmpty(ApplicationPassword)){
            message = null;
            error = "Please fill in all the fields.";
            return;
        }
        application.ApplicationName = ApplicationName;
        application.ApplicationUsername = ApplicationUserName;
        application.ApplicationPassword = ApplicationPassword;
        if(UserState.CurrentUser != null){
            application.UserId = UserState.CurrentUser.Id; 
        }
        try{
            message = await UsersApiService.CreateApplication(application);
            error = null;
            ApplicationName = string.Empty;
            ApplicationUserName = string.Empty;
            ApplicationPassword = string.Empty;
        }
        catch(Exception ex){
            error = $"Error: {ex.Message}";
        }
    }
    /// <summary>
    /// Picks a random number 4 times and gets the word from the prepoulated list of words that coresponds 
    /// and builds a passphrase
    /// </summary>
    public void GeneratePassPhrase(){
        Random random = new();
        for(int i = 0; i < 4; i++){
            int num = random.Next(0,20000);
            PassPhrase += $"{AllWords.AllWords[num]} ";
        }
        ApplicationPassword = PassPhrase;
        PassPhrase = "";
    }
}