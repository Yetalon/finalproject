@using passfrontend.Models
@using passfrontend.Services
@using Blazored.LocalStorage
@page "/"
@inject UsersApiServices UsersApiService
@inject NavigationManager Navigate
@inject UserStateService UserState
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Home</PageTitle>
<div class="row mt-5">
    <h1 class="text-center mb-4">Welcome to Alex's Password Manager</h1>
    <div class="card p-4 mx-auto" style="max-width: 400px;">
        <h3>Login</h3>
        <div class="form-group">
            <label>Username</label>
            <input class="form-control" @bind=UserName placeholder="Enter Username">
        </div>
        <div class="form-group mt-2">
            <label>Password</label>
            <input class="form-control" type="password" @bind=Password placeholder="Enter Password">
        </div>
        <button class="btn btn-primary mt-3 w-100" @onclick="Login">Log in</button>
        <div class="text-danger mt-3">@message</div>
    </div>
    <br>
    <a class="text-center mt-4" href="/createlogin">Create new login</a>
</div>

@code {
    string? UserName { get; set; }
    string? Password { get; set; }
    string? message { get; set; }
    Login userLogin = new();
    User user = new();
    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            var userName = await LocalStorage.GetItemAsync<string>("user");
            if(!string.IsNullOrEmpty(userName)){
                try{
                    var response = await UsersApiService.GetUserByUserName(userName);
                    Navigate.NavigateTo($"/dashboard/{response.UserName}");
                }
                catch(Exception ex){
                    message = $"session has expired error: {ex}";
                }
            }
        }
    }
    public async Task Login() {
        userLogin.LoginUserName = UserName;
        userLogin.HashedPassword = Password;

        try {
            var response = await UsersApiService.GetUser(userLogin);
            if (response == null) {
                message = "Invalid username or password";
            } else {
                UserState.CurrentUser = response;
                await LocalStorage.SetItemAsync("user", UserState.CurrentUser.UserName);
                Navigate.NavigateTo($"/dashboard/{UserState.CurrentUser.UserName}");
            }
        }
        catch (Exception ex) {
            message = $"Error: {ex.Message}";
        }
        UserName = "";
        Password = "";
    }
}