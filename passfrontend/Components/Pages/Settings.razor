@using passfrontend.Models
@using passfrontend.Services
@using Blazored.LocalStorage
@page "/settings"
@inject UsersApiServices UsersApiService
@inject UserStateService UserState
@inject NavigationManager Navigate
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
<PageTitle>Settings</PageTitle>
<div class="row d-flex justify-content-center align-items-center">
    <div class="username mb-4">
        <h1>Change Username</h1>
        <hr>
        <p>Current Username: @UserState.CurrentUser?.UserName</p>
        @if(!isChangingUserName){
            <button class="btn btn-dark btn-lg btn-outline-light" @onclick=ChangeUsername>Change Username</button>
        }
        else{
            <div class="card text-start">
                <div class="card-body">
                    <h4 class="card-title">New username</h4>
                    <input class="card-text" @bind=newUsername>
                </div>
                <p class="ps-3 text-danger">@message</p>
                <div class="d-flex justify-content-start gap-5 m-2">
                    <button class="btn btn-dark btn-lg btn-outline-light" @onclick=ConfirmChangeUsername>Confirm</button>
                    <button class="btn btn-dark btn-lg btn-outline-light align-content-end" @onclick=ChangeUsername>Close</button>
                </div>
            </div>
        }
    </div>
    <div class="password mb-4">
        <h1>Change Password</h1>
        <hr>
        @if(!isChangingPassword){
            <button class="btn btn-dark btn-lg btn-outline-light" @onclick=ChangePassword>Change Password</button>
        }
        else{
            <div class="card text-start">
                <div class="card-body">
                    <h4 class="card-title">New password</h4>
                    <input class="card-text" type="password" @bind=newPassword>
                </div>
                <p class="ps-3 text-danger">@message</p>
                <div class="d-flex justify-content-start gap-5 m-2">
                    <button class="btn btn-dark btn-lg btn-outline-light" @onclick=ConfirmChangePassword>Confirm</button>
                    <button class="btn btn-dark btn-lg btn-outline-light align-content-end" @onclick=ChangePassword>Close</button>
                </div>
                
            </div>
        }
    </div>
    <div class="Delete mb-4">
        <h1>Delete Account</h1>
        <hr>
        @if(!isDeletingUser){
            <button class="btn btn-dark btn-lg btn-outline-light" @onclick=DeleteUser>Delete Account</button>
        }
        else{
            <div class="card text-start">
                <div class="card-body">
                    <h4 class="card-title">Delete Account</h4>
                    <p class="card-text">Are you sure you want to delete your account</p>
                </div>
                <div class="d-flex justify-content-start gap-5 m-2">
                    <button class="btn btn-dark btn-lg btn-outline-light" @onclick=ConfirmDeleteUser>Confirm</button>
                    <button class="btn btn-dark btn-lg btn-outline-light align-content-end" @onclick=DeleteUser>Close</button>
                </div>
            </div>
        }
    </div>
    <div class="Logout">
        <h1>Logout</h1>
        <hr>
            <button class="btn btn-dark btn-lg btn-outline-light" @onclick=Logout>Logout</button>
    </div>
</div>

@code {
    /// <summary>
    /// message to display to the user
    /// </summary>
    string? message {get; set;}
    /// <summary>
    /// The current username
    /// </summary>
    string? userName {get; set;}
    /// <summary>
    /// The new username to change to
    /// </summary>
    string? newUsername {get; set;}
    /// <summary>
    /// the new password to change to
    /// </summary>
    string? newPassword {get; set;}
    /// <summary>
    /// Indicates whether the username is being changed
    /// </summary>
    bool isChangingUserName {get; set;} = false;
    /// <summary>
    /// Indicates whether the password is being changed
    /// </summary>
    bool isChangingPassword {get; set;} = false;
    /// <summary>
    /// indicates whether the user is being deleted
    /// </summary>
    bool isDeletingUser {get; set;} = false;
    /// <summary>
    /// After first rend checks localstorage to see if user should already be logged in 
    /// if user should not already be logged in sends them ot the login screen
    /// </summary>
    /// <param name="firstRender">if the page has already been render it equals true false otherwise</param> 
    protected override async Task OnAfterRenderAsync(bool firstRender){
        if (firstRender)
        {
            userName = await LocalStorage.GetItemAsync<string>("user");
            if (!string.IsNullOrEmpty(userName))
            {
                try
                {
                    var response = await UsersApiService.GetUserByUserName(userName);
                    if (response != null)
                    {
                        UserState.CurrentUser = response;
                    }
                }
                catch
                {
                  Navigate.NavigateTo("/");
                }
            }
            else
            {
                Navigate.NavigateTo("/");
            }
            StateHasChanged();
        }
    }
    /// <summary>
    /// Toggles the username change form
    /// </summary>
    public void ChangeUsername(){
        if(isChangingUserName){
            isChangingUserName = false;
        }
        else{
            isChangingUserName = true;
        }
    }
    /// <summary>
    /// Confirms and saves the new username for the user
    /// If the username field is empty an error message is displayed
    /// </summary>
    public async Task ConfirmChangeUsername(){
        User newuser = new();
        if(string.IsNullOrEmpty(newUsername)){
            message = "username field is empty";
            return;
        }
        newuser.UserName = newUsername;
        newuser.Id = UserState.CurrentUser.Id;
        newuser.Password = UserState.CurrentUser.Password;
        try{
            var response =  await UsersApiService.ChangeUser(UserState.CurrentUser.Id, newuser);
            UserState.CurrentUser = response;
            await LocalStorage.RemoveItemAsync("user");
            await LocalStorage.SetItemAsync("user", UserState.CurrentUser.UserName);
            isChangingUserName = false;
            newUsername = null;
            message = "";
            StateHasChanged();
        }
        catch(Exception ex){
            message = "error: username already exists";
        }
    }
    /// <summary>
    /// Toggles the password change form
    /// </summary>
    public void ChangePassword(){
        if(isChangingPassword){
            isChangingPassword = false;
        }
        else{
            isChangingPassword = true;
        }
    }
    /// <summary>
    /// Confirms and saves the new password for the user
    /// if the password field is empty an error message is displayed
    /// </summary>
    public async Task ConfirmChangePassword(){
        User newuser = new();
        if(string.IsNullOrEmpty(newPassword)){
            message = "password field is empty";
            return;
        }
        newuser.UserName = UserState.CurrentUser.UserName;
        newuser.Id = UserState.CurrentUser.Id;
        newuser.Password = newPassword;
        try{
            var response = await UsersApiService.ChangeUser(UserState.CurrentUser.Id, newuser);
            UserState.CurrentUser = response;
            isChangingPassword = false;
            newPassword = null;
            message = "";
            StateHasChanged();
        }
        catch(Exception ex){
            message = $"error: {ex}";
        }
    }
    /// <summary>
    /// Toggles the account deltion confrimation form
    /// </summary>
    public void DeleteUser(){
        if(isDeletingUser){
            isDeletingUser = false;
        }
        else{
            isDeletingUser = true;
        }
    }
    /// <summary>
    /// Confrims and deletes the user's account
    /// if successful logs the userout and returns them to the login page
    /// if the deletion fails it displays an error message
    /// </summary>
    public async Task ConfirmDeleteUser(){
        try{
            var response = await UsersApiService.DeleteUser(UserState.CurrentUser.Id);
            if(response == true){
                UserState.LogOut();
                await LocalStorage.RemoveItemAsync("user");
                Navigate.NavigateTo("/");
            }
        }
        catch{
            message = "User deletion failed";
        }
    }
    /// <summary>
    /// Logs the user out by clearing the current user and removing the localstorage of the user
    /// it then redirects the user to the login page
    /// </summary>
    public async Task Logout(){
        UserState.LogOut();
        await LocalStorage.RemoveItemAsync("user");
        Navigate.NavigateTo("/");
    }
}